{"version":3,"sources":["scripts/main.js"],"names":["score","boardSize","gameFieldValues","isWinLose","body","document","gameButton","querySelector","gameField","gameBody","message","messageStart","messageWin","messageLose","messageScore","initGameField","i","j","classList","add","addNewElement","isMove","row","Math","floor","random","length","column","redrawField","checkForGameOver","cellValue","cellNode","rows","cells","remove","innerText","checkForWin","reduce","pv","cv","includes","makeRowMove","direction","moveRow","combineRow","makeColumnMove","moveColumn","combineColumn","filtered","filter","item","newRow","concat","Array","fill","map","total","addEventListener","e","defaultPrevented","key","preventDefault","target","contains","hidden"],"mappings":"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","file":"main.7029880d.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// Data\nlet score = 0;\nconst boardSize = 4;\nconst gameFieldValues = [];\nlet isWinLose = false;\n\n// DOM elements\nconst body = document.body;\nconst gameButton = body.querySelector('.button');\nconst gameField = body.querySelector('.game-field');\nconst gameBody = gameField.querySelector('tbody');\nconst message = body.querySelector('.message-container');\nconst messageStart = message.querySelector('.message-start');\nconst messageWin = message.querySelector('.message-win');\nconst messageLose = message.querySelector('.message-lose');\nconst messageScore = body.querySelector('.game-score');\n\n// DOM events\ndocument.addEventListener('keydown', (e) => {\n  if (isWinLose) {\n    return;\n  }\n\n  if (e.defaultPrevented) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'Up':\n    case 'ArrowUp':\n      makeColumnMove('up');\n      break;\n    case 'Down':\n    case 'ArrowDown':\n      makeColumnMove('down');\n      break;\n    case 'Left':\n    case 'ArrowLeft':\n      makeRowMove('left');\n      break;\n    case 'Right':\n    case 'ArrowRight':\n      makeRowMove('right');\n      break;\n    default:\n      return;\n  }\n\n  e.preventDefault();\n});\n\ngameButton.addEventListener('click', (e) => {\n  if (e.target.classList.contains('start')) {\n    e.target.classList.remove('start');\n    e.target.classList.add('restart');\n    e.target.innerText = 'Restart';\n    messageStart.hidden = true;\n  }\n\n  initGameField();\n});\n\n// Game logic methods\nfunction initGameField() {\n  for (let i = 0; i < boardSize; i++) {\n    gameFieldValues[i] = [];\n\n    for (let j = 0; j < boardSize; j++) {\n      gameFieldValues[i][j] = 0;\n    }\n  }\n  score = 0;\n  isWinLose = false;\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  for (let i = 0; i < 2; i++) {\n    addNewElement();\n  }\n}\n\nfunction addNewElement(isMove) {\n  const row = Math.floor(Math.random() * gameFieldValues.length);\n  const column = Math.floor(Math.random() * gameFieldValues[row].length);\n\n  if (gameFieldValues[row][column] !== 0) {\n    addNewElement(isMove);\n  } else {\n    gameFieldValues[row][column] = isMove\n      ? Math.random() < 0.9 // 10% probability for 4 appear\n        ? 2\n        : 4\n      : 2;\n    redrawField();\n    checkForGameOver();\n  }\n}\n\nfunction redrawField() {\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      const cellValue = gameFieldValues[i][j];\n      const cellNode = gameBody.rows[i].cells[j];\n\n      cellNode.classList.remove(`field-cell--${cellNode.innerText}`);\n      cellNode.innerText = '';\n\n      if (cellValue) {\n        cellNode.classList.add(`field-cell--${cellValue}`);\n        cellNode.innerText = cellValue;\n      }\n    }\n  }\n\n  messageScore.innerText = score;\n}\n\nfunction checkForWin() {\n  const result = gameFieldValues.reduce((pv, cv) => [...pv, ...cv]);\n\n  if (result.includes(2048)) {\n    isWinLose = true;\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction checkForGameOver() {\n  const result = gameFieldValues.reduce((pv, cv) => [...pv, ...cv]);\n\n  if (!result.includes(0)) {\n    isWinLose = true;\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction makeRowMove(direction) {\n  moveRow(direction);\n  combineRow();\n  moveRow(direction);\n  addNewElement(true);\n}\n\nfunction makeColumnMove(direction) {\n  moveColumn(direction);\n  combineColumn();\n  moveColumn(direction);\n  addNewElement(true);\n}\n\nfunction moveRow(direction) {\n  for (let i = 0; i < boardSize; i++) {\n    const filtered = gameFieldValues[i].filter(item => item);\n    const newRow = direction === 'left'\n      ? filtered.concat(Array(boardSize - filtered.length).fill(0))\n      : Array(boardSize - filtered.length).fill(0).concat(filtered);\n\n    for (let j = 0; j < boardSize; j++) {\n      gameFieldValues[i][j] = newRow[j];\n    }\n  }\n}\n\nfunction moveColumn(direction) {\n  for (let i = 0; i < boardSize; i++) {\n    const filtered = gameFieldValues.map(item => item[i]).filter(item => item);\n    const newRow = direction === 'up'\n      ? filtered.concat(Array(boardSize - filtered.length).fill(0))\n      : Array(boardSize - filtered.length).fill(0).concat(filtered);\n\n    for (let j = 0; j < boardSize; j++) {\n      gameFieldValues[j][i] = newRow[j];\n    }\n  }\n}\n\nfunction combineRow() {\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize - 1; j++) {\n      if (gameFieldValues[i][j] === 0) {\n        continue;\n      }\n\n      if (gameFieldValues[i][j] === gameFieldValues[i][j + 1]) {\n        const total = gameFieldValues[i][j] + gameFieldValues[i][j + 1];\n\n        gameFieldValues[i][j] = total;\n        gameFieldValues[i][j + 1] = 0;\n        score += total;\n      }\n    }\n  }\n\n  checkForWin();\n}\n\nfunction combineColumn() {\n  for (let i = 0; i < boardSize - 1; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      if (gameFieldValues[i][j] === 0) {\n        continue;\n      }\n\n      if (gameFieldValues[i][j] === gameFieldValues[i + 1][j]) {\n        const total = gameFieldValues[i][j] + gameFieldValues[i + 1][j];\n\n        gameFieldValues[i][j] = total;\n        gameFieldValues[i + 1][j] = 0;\n        score += total;\n      }\n    }\n  }\n\n  checkForWin();\n}\n"]}